---

- name: make sure our user is in the audio group
  user: 
    name: "{{ansible_env.SUDO_USER}}"
    groups: audio
    append: yes
  register: adduser

- name: exit if sclang/supercollider is already running
  command: "pgrep sclang -u {{ansible_env.SUDO_USER}}"
  register: scpid
  failed_when: scpid.rc == 0
  changed_when: false

- block:
  - name: get cabal version
    shell: cabal --numeric-version
    register: cabver
    changed_when: false

  - set_fact:
      current_cabal: "{{ cabver.stdout }}"
      new_cabal_syntax_ver: 3.0.0.0

  - name: update cabal
    shell: cabal update  
    changed_when: false

  - name: find the GHC environment (best guess, use highest ver number if multiple exist)
    shell: "find /home/{{ansible_env.SUDO_USER}}/.ghc -type f -name default | sort -V | tail -n 1"
    register: ghcdef
    changed_when: false

  - name: get installed tidal version (if any)
    shell: "grep \"^package-id tidal-[0-9]\" {{ ghcdef.stdout }} | sort -V | tail -n 1 | cut -d- -f3"
    register: tidcurr
    changed_when: false

  - name: get latest available tidal version
    shell: "cabal list tidal --simple-output | grep \"^tidal \" | sort -V | tail -n 1 | cut -d' ' -f2"
    register: tidavail
    changed_when: false

  become: yes
  become_method: su
  become_user: "{{ansible_env.SUDO_USER}}"
  become_flags: '-s /bin/bash'

- block:
  - name: remove old tidal versions from ghc env default to allow upgrade (?!)
    lineinfile:
      path: "{{ ghcdef.stdout }}"
      state: absent
      regexp: '^package-id tidal-[0-9]'

  - debug:
      msg: "Newer version of tidal available, upgrading to v{{ tidavail.stdout }}"
    when: current_cabal is version(new_cabal_syntax_ver, '>=')

  - name: "compile and install tidal using --lib (cabal >= {{ new_cabal_syntax_ver }})"
    shell: "cabal install tidal-{{tidavail.stdout}} --lib"
    register: tidin
    changed_when: "not tidin.stdout is search('All the requested packages are already installed:')"
    when: current_cabal is version(new_cabal_syntax_ver, '>=')

  - name: "compile and install legacy tidal (cabal < {{ new_cabal_syntax_ver }})"
    shell: cabal install tidal
    register: tidin
    changed_when: "not tidin.stdout is search('All the requested packages are already installed:')"
    when: current_cabal is version(new_cabal_syntax_ver, '<')
  
  become: yes
  become_method: su
  become_user: "{{ansible_env.SUDO_USER}}"
  become_flags: '-s /bin/bash'
  when: (tidcurr is not defined) or
        (tidcurr.stdout < tidavail.stdout)

- include_role:
    name: "roles/ugens-{{ item }}"
  vars:
    editor: None
  with_items: "{{ sc_ugens }}"
  when: sc_ugens is defined

- block:
  - name: get latest superdirt version tag from the repo
    shell: git ls-remote https://github.com/musikinformatik/SuperDirt.git | grep tags | tail -n1 | awk -F/ '{print $NF}'
    register: sdver
    changed_when: false

  - set_fact:
      superdirt_ver: "{{ sdver.stdout }}"

  - name: create template dest directory ~/.local/share (if required)
    file:
      path: "/home/{{ansible_env.SUDO_USER}}/.local/share"
      state: directory
      mode: '0775'

  - name: copy superdirt_*.scd templates to ~/.local/share/
    template:
      src: "templates/{{ item }}.scd.template"
      dest: "/home/{{ansible_env.SUDO_USER}}/.local/share/{{ item }}.scd"
      mode: 0640
    with_items:
      - superdirt_install

  - name: set DISPLAY variable for sclang running
    set_fact:
      display: :99
    when: ansible_env.DISPLAY is not defined

  - set_fact:
      display: "{{ ansible_env.DISPLAY }}"
    when: display is not defined

  - name: install SuperDirt
    shell: "sclang /home/{{ansible_env.SUDO_USER}}/.local/share/superdirt_install.scd >> /home/{{ansible_env.SUDO_USER}}/.local/share/sc_install.log"
    environment:
      DISPLAY: "{{ display }}"

  - name: make sure our SuperCollider config dir exists
    file:
      path: "{{ sc_conf_dir }}"
      state: directory
      mode: 0755

  - name: copy SuperCollider startup.scd template (backup any existing)
    template:
      src: templates/startup.scd.template
      dest: "{{ sc_conf_dir }}/startup.scd"
      mode: 0640
      backup: yes
    tags:
    - config

  become: yes
  become_method: su
  become_user: "{{ansible_env.SUDO_USER}}"
  become_flags: '-s /bin/bash'

- include_role:
    name: "roles/ugens-{{ item }}"
  with_items: "{{ sc_ugens }}"
  when: sc_ugens is defined

- debug:
    msg: "NOTE: {{ansible_env.SUDO_USER}} has been added to audio group, logout/reboot **after** ansible finishes (waiting for 10s)"
  when: adduser.changed

- wait_for:
    timeout: 10
  when: adduser.changed

- block:
  - name: stop xvfb service
    systemd:
      state: stopped
      name: xvfb.tmp.service
  when: ansible_env.DISPLAY is not defined
